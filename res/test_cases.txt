
/* should know when to exit rule
int main() {
}

}}

int main() {
    int x;
}
*/

/*

func int myFunction(int x) {
	int add = x + 50 ++ 1; //syntax error #1

	return int; //syntax error #2
}

func float myFunctionFloat(float x) {
	float fTest = (x * 50) + (x * 15)); //syntax error #3

	return fTest * 50 (); //syntax error #4
}

main() {
	myFunction(50);
	myFunctionFloat(50.0f);
}

*/

/*
func void testOne() {
	int x = 0;
	scan("Hello. I need your number: " ,x);

	for int i to 10 { //syntax error #1
		print("Petmalu " +x+); //syntax error #2

	//syntax error #3 (missing curly brace)
}

func void testTwo(float x) {
	if(x = 4) then //syntax error #4
	{
		print(x is a very huge number); //syntax error #5
	}
}

main() {
	float storage = (5 * 1) + (5 * 5 / 1 + 3 + (4 + (5 * 3)))/2.0f * 8.0f;

	testOne()(x); //syntax error #6
	testTwo(123 ++storage); //syntax error #7
}
*/

/*
int main() {
	if (T) then
		int x;
	}
	if (T) then {
		int y;
	}}}} 
	if (T) then 
}
*/

/*
boolean assertNonZero(int x) {
	if(x > 0) {
		return true;
	}

	//error #1
}

void sayHelloWorld() {
	print("Hello World");
}

//error #2
void sayHelloWorld() {
	print("Hello World); //error #3
}

void testPrint() {

	for(int i = 0; i < (5 * 2; i ++) { //error #4
		print("Petmalu " +x+); //error #5


	//error #6 (missing curly brace)

	return 10; //error #7
}

void arrayTest(int size_1, int size_2) {
	int[] simpleArray = new int[size_1];
	int[] simpleArray = new int[size_2]; //error #8
	int[] simpleArray_2 = new int[2.0f]; //error #9

	int complexArraySize = (size_1 * 2) - size_2 - 4;
	int[] complexArray = new int[complexArraySize];

	for(int i = 0; i < complexArraySize; i++) {
		complexArraySize[i] = i;
	}

	return complexArray; //error #10
}

void main() {
	final int PI = 3.14; //error #11
	int x = 0, y = 5, z = 13;

	z = assertNonZero(x); //error #12
	z += x += 5; //error  #13
	z +++; //error #14

	if(z > 0) {
		print("Computated storage: " + someValue()); //error #15
		print("Computed storage: " +someValue);
	}

	int z = 0, x = 0; //syntax error #16, #17

	z * 10; //error #18
	z = x ++ (y + "10"); //error #19
	PI = x + y; //error #20

	sayHelloWorld()(); //error #21
	print(Finished execution); //error #22


}
*/
